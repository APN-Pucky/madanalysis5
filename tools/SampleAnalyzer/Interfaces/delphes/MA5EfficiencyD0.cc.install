/*
 *  Delphes: a framework for fast simulation of a generic collider experiment
 *  Copyright (C) 2012-2014  Universite catholique de Louvain (UCL), Belgium
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


/** \class MA5EfficiencyD0
 *
 *  Selects candidates from the InputArray according to the efficiency formula.
 *
 *  \author P. Demin - UCL, Louvain-la-Neuve
 *
 */

#include "modules/MA5EfficiencyD0.h"

#include "classes/DelphesClasses.h"
#include "classes/DelphesFactory.h"
#include "classes/DelphesFormula.h"

#include "ExRootAnalysis/ExRootResult.h"
#include "ExRootAnalysis/ExRootFilter.h"
#include "ExRootAnalysis/ExRootClassifier.h"

#include "TMath.h"
#include "TString.h"
#include "TFormula.h"
#include "TRandom3.h"
#include "TObjArray.h"
#include "TDatabasePDG.h"
#include "TLorentzVector.h"

#include <algorithm> 
#include <stdexcept>
#include <iostream>
#include <sstream>

using namespace std;

//------------------------------------------------------------------------------

MA5EfficiencyD0::MA5EfficiencyD0() :
  fFormula(0), fItInputArray(0)
{
  fFormula = new DelphesFormula;
}

//------------------------------------------------------------------------------

MA5EfficiencyD0::~MA5EfficiencyD0()
{
  if(fFormula) delete fFormula;
}

//------------------------------------------------------------------------------

void MA5EfficiencyD0::Init()
{
  // read efficiency formula

  fFormula->Compile(GetString("EfficiencyFormula", "1.0"));

  // import input array

  fInputArray = ImportArray(GetString("InputArray", "ParticlePropagator/stableParticles"));
  fItInputArray = fInputArray->MakeIterator();

  // create output array

  fOutputArray = ExportArray(GetString("OutputArray", "stableParticles"));

  // debugging 
  //  std::cout << "benchmark: d0=100mm -> eff=" << fFormula->Eval(0, 0, 0, 100)
  //            << " ; d0=300mm -> eff=" << fFormula->Eval(0, 0, 0, 300)
  //            << " ; d0=500mm -> eff=" << fFormula->Eval(0, 0, 0, 500)
  //            << std::endl;
}

//------------------------------------------------------------------------------

void MA5EfficiencyD0::Finish()
{
  if(fItInputArray) delete fItInputArray;
}

//------------------------------------------------------------------------------

void MA5EfficiencyD0::Process()
{ 
  Candidate *candidate;
  Double_t d0;
  Double_t pt;
  Double_t eta;
  Double_t phi;

  fItInputArray->Reset();
  while((candidate = static_cast<Candidate*>(fItInputArray->Next())))
  {
    const TLorentzVector &candidatePosition = candidate->Position;
    const TLorentzVector &candidateMomentum = candidate->Momentum;
    eta = candidatePosition.Eta();
    phi = candidatePosition.Phi();
    pt  = candidateMomentum.Pt();
    d0  = std::abs(candidate->D0);

    // debugging
    //    std::cout << "d0=" << d0 << " - eff=" << fFormula->Eval(pt, eta, phi, d0) << std::endl;

    // apply an efficency formula
    if(gRandom->Uniform() > fFormula->Eval(pt, eta, phi, d0)) continue;
    
    fOutputArray->Add(candidate);
  }
}

//------------------------------------------------------------------------------
