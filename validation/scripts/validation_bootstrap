#!/usr/bin/env python3

################################################################################
#
#  Copyright (C) 2012-2022 Jack Araz, Eric Conte & Benjamin Fuks
#  The MadAnalysis development team, email: <ma5team@iphc.cnrs.fr>
#
#  This file is part of MadAnalysis 5.
#  Official website: <https://github.com/MadAnalysis/madanalysis5>
#
#  MadAnalysis 5 is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  MadAnalysis 5 is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with MadAnalysis 5. If not, see <http://www.gnu.org/licenses/>
#
################################################################################

import argparse, os, sys

from typing import Text
import ma5_validation as ma5


def ma5_setup(path: Text):
    if not os.path.isdir(path):
        ma5.system.InvalidMadAnalysisPath(
            "Detected MadAnalysis 5 general folder is not correct: " + path
        )
    os.environ["MA5_BASE"] = path
    sys.path.insert(0, path)
    servicedir = os.path.join(path, "tools/ReportGenerator/Services")
    if not os.path.isdir(servicedir):
        ma5.system.InvalidMadAnalysisPath(
            "Detected MadAnalysis 5 service folder is not correct: " + path
        )
    sys.path.insert(0, servicedir)
    from madanalysis.core.main import Main as ma5_main

    curdir = os.getcwd()
    os.chdir(os.path.join(path, "bin"))
    main = ma5_main()
    main.archi_info.ma5dir = path
    main.CheckConfig(debug=True)
    main.CheckConfig2(debug=True)
    main.Display()
    os.chdir(curdir)
    return main.session_info, main.archi_info


def run_scripts(path: Text):
    """
    A generic function to run MadAnalysis 5 scripts

    Parameters
    ----------
    path : Text
        Path to the scripts folder or full path of the script itself.

    Raises
    ------
    MadAnalysis5ExecutionError
        If execution has failed.
    MadAnalysis5Error
        If check has failed.
    For other exceptions please see `ma5_validation.utils.JobHandler` internal exceptions.
    """

    def execute(script):
        current_script.decode()
        job = ma5.utils.JobHandler(current_script)
        if not job.execute():
            raise ma5.system.MadAnalysis5ExecutionError("MadAnalysis execution has failed.")
        if not job.check():
            raise ma5.system.MadAnalysis5Error("MadAnalysis has raised an error.")

    if os.path.isdir(path):
        for script in os.listdir(path):
            if script.endswith(".ma5"):
                current_script = ma5.utils.ScriptReader(os.path.join(path, script))
                execute(current_script)
    else:
        current_script = ma5.utils.ScriptReader(path)
        execute(current_script)


def main(args):

    ma5.utils.PathHandler.set_ma5path(args.MA5DIR)
    ma5.utils.PathHandler.set_logpath(args.LOGDIR)

    # Check if samples are installed
    if not os.path.isdir(ma5.utils.PathHandler.SMP_PATH):
        smp_installation = ma5.utils.InstallationHandler("samples")
        job = ma5.utils.JobHandler(smp_installation)
        if not (job.execute() and job.check()):
            raise ma5.system.MadAnalysis5Error("A problem has occured during sample installation.")

    session_info, archi_info = ma5_setup(ma5.utils.PathHandler.MA5PATH)

    if args.PARTON:
        run_scripts(os.path.join(ma5.utils.PathHandler.PARTON_LEVEL_PATH))
    if args.HADRON:
        run_scripts(os.path.join(ma5.utils.PathHandler.HADRON_LEVEL_PATH))
    if args.RECO:
        run_scripts(os.path.join(ma5.utils.PathHandler.RECO_LEVEL_PATH))
    if args.EXPERT:
        if not archi_info.has_fastjet:
            job = ma5.utils.JobHandler(ma5.utils.InstallationHandler("fastjet"))
            if not (job.execute() and job.check()):
                raise ma5.system.MadAnalysis5Error(
                    "A problem has occured during fastjet installation."
                )
        run_scripts(os.path.join(ma5.utils.PathHandler.EXPERT_LEVEL_PATH))
    if args.CUSTOM is not None:
        run_scripts(args.CUSTOM)


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Validation module executor for MadAnalysis 5")

    paths = parser.add_argument_group("Path handling.")
    paths.add_argument(
        "--ma5-dir",
        type=str,
        dest="MA5DIR",
        default=ma5.utils.PathHandler.MA5PATH,
        help=f"MadAnalysis 5 directory path. " f"Default `{ma5.utils.PathHandler.MA5PATH}`",
    )
    paths.add_argument(
        "--log-dir",
        type=str,
        dest="LOGDIR",
        default=ma5.utils.PathHandler.LOGPATH,
        help=f"Log directory path. " f"Default `{ma5.utils.PathHandler.LOGPATH}`",
    )

    validation = parser.add_argument_group("Validation Handling")
    validation.add_argument(
        "-P",
        "--parton-level",
        dest="PARTON",
        action="store_true",
        default=False,
        help="Validate normal mode in parton level.",
    )
    validation.add_argument(
        "-H",
        "--hadron-level",
        dest="HADRON",
        action="store_true",
        default=False,
        help="Validate normal mode in hadron level.",
    )
    validation.add_argument(
        "-R",
        "--reco-level",
        dest="RECO",
        action="store_true",
        default=False,
        help="Validate normal mode in reco level.",
    )
    validation.add_argument(
        "-e",
        "--expert-mode",
        dest="EXPERT",
        action="store_true",
        default=False,
        help="Validate expert mode.",
    )
    validation.add_argument(
        "--custom-script",
        dest="CUSTOM",
        default=None,
        type=str,
        help="Validate a custom MadAnalysis 5 script. Script needs to be written in `ma5_validation` syntax.",
    )

    args = parser.parse_args()

    main(args)
